#!/usr/bin/env bash

# audio-debug - Linux audio system debugging tool
# This script helps identify and debug issues with various Linux audio systems
# including PulseAudio, PipeWire, ALSA, and JACK

set -e

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Print header
echo -e "${BOLD}${BLUE}===== Linux Audio System Debugger =====${NC}\n"

# Check for root privileges
check_root() {
  if [ "$EUID" -eq 0 ]; then
    echo -e "${YELLOW}Warning: Running as root. Some audio tests may not reflect user environment.${NC}\n"
  fi
}

# Check for basic tools
check_dependencies() {
  echo -e "${CYAN}Checking for required tools...${NC}"
  local missing=0
  
  for cmd in grep awk systemctl find lsof; do
    if ! command -v "$cmd" &> /dev/null; then
      echo -e "  ${RED}✗ $cmd not found${NC}"
      missing=$((missing+1))
    else
      echo -e "  ${GREEN}✓ $cmd found${NC}"
    fi
  done
  
  if [ $missing -gt 0 ]; then
    echo -e "\n${YELLOW}Some basic tools are missing. Install them for more accurate diagnostics.${NC}\n"
  else
    echo -e "  ${GREEN}All basic dependencies are met.${NC}\n"
  fi
}

# Check which audio systems are installed/running
detect_audio_systems() {
  echo -e "${CYAN}Detecting audio systems...${NC}"
  
  # Check for ALSA
  if command -v aplay &> /dev/null || [ -d "/proc/asound" ]; then
    echo -e "  ${GREEN}✓ ALSA detected${NC}"
    has_alsa=true
  else
    echo -e "  ${RED}✗ ALSA not detected${NC}"
    has_alsa=false
  fi
  
  # Check for PulseAudio
  if command -v pulseaudio &> /dev/null; then
    echo -e "  ${GREEN}✓ PulseAudio installed${NC}"
    has_pulse=true
    
    if pgrep -x pulseaudio &> /dev/null; then
      echo -e "    ${GREEN}✓ PulseAudio is running${NC}"
      pulse_running=true
    else
      echo -e "    ${RED}✗ PulseAudio is installed but not running${NC}"
      pulse_running=false
    fi
  else
    echo -e "  ${RED}✗ PulseAudio not installed${NC}"
    has_pulse=false
    pulse_running=false
  fi
  
  # Check for PipeWire
  if command -v pipewire &> /dev/null; then
    echo -e "  ${GREEN}✓ PipeWire installed${NC}"
    has_pipewire=true
    
    if pgrep -x pipewire &> /dev/null; then
      echo -e "    ${GREEN}✓ PipeWire is running${NC}"
      pipewire_running=true
    else
      echo -e "    ${RED}✗ PipeWire is installed but not running${NC}"
      pipewire_running=false
    fi
    
    # Check for pipewire-pulse
    if pgrep -f "pipewire-pulse" &> /dev/null; then
      echo -e "    ${GREEN}✓ PipeWire PulseAudio replacement is running${NC}"
    else
      echo -e "    ${YELLOW}? PipeWire PulseAudio replacement not detected${NC}"
    fi
  else
    echo -e "  ${RED}✗ PipeWire not installed${NC}"
    has_pipewire=false
    pipewire_running=false
  fi
  
  # Check for JACK
  if command -v jackd &> /dev/null; then
    echo -e "  ${GREEN}✓ JACK installed${NC}"
    has_jack=true
    
    if pgrep -x jackd &> /dev/null; then
      echo -e "    ${GREEN}✓ JACK is running${NC}"
    else
      echo -e "    ${YELLOW}? JACK is installed but not running (could be using JACK through PipeWire)${NC}"
    fi
  else
    echo -e "  ${RED}✗ JACK not installed${NC}"
    has_jack=false
  fi
  
  echo ""
}

# Check audio devices (ALSA)
check_alsa_devices() {
  if [ "$has_alsa" = true ]; then
    echo -e "${CYAN}Checking ALSA devices...${NC}"
    
    echo -e "  ${PURPLE}Available sound cards:${NC}"
    if [ -f "/proc/asound/cards" ]; then
      cat /proc/asound/cards | grep -v "^$" | sed 's/^/    /'
    else
      echo -e "    ${RED}Unable to access sound card information${NC}"
    fi
    
    echo -e "\n  ${PURPLE}ALSA device list:${NC}"
    if command -v aplay &> /dev/null; then
      aplay -l | sed 's/^/    /'
    else
      echo -e "    ${RED}aplay not available to list devices${NC}"
    fi
    
    echo ""
  fi
}

# Check PulseAudio
check_pulseaudio() {
  if [ "$has_pulse" = true ]; then
    echo -e "${CYAN}Checking PulseAudio status...${NC}"
    
    if systemctl --user is-active --quiet pulseaudio.service 2>/dev/null; then
      echo -e "  ${GREEN}✓ PulseAudio service is active (systemd user)${NC}"
    elif systemctl is-active --quiet pulseaudio.service 2>/dev/null; then
      echo -e "  ${GREEN}✓ PulseAudio service is active (systemd system)${NC}"
    elif [ "$pulse_running" = true ]; then
      echo -e "  ${GREEN}✓ PulseAudio is running (non-systemd)${NC}"
    else
      echo -e "  ${RED}✗ PulseAudio service is not active${NC}"
    fi
    
    if [ "$pulse_running" = true ] && command -v pactl &> /dev/null; then
      echo -e "\n  ${PURPLE}PulseAudio sinks (output devices):${NC}"
      pactl list short sinks | sed 's/^/    /'
      
      echo -e "\n  ${PURPLE}PulseAudio sources (input devices):${NC}"
      pactl list short sources | sed 's/^/    /'
      
      echo -e "\n  ${PURPLE}PulseAudio clients:${NC}"
      pactl list short clients | sed 's/^/    /'
    fi
    
    echo ""
  fi
}

# Check PipeWire
check_pipewire() {
  if [ "$has_pipewire" = true ]; then
    echo -e "${CYAN}Checking PipeWire status...${NC}"
    
    if systemctl --user is-active --quiet pipewire.service 2>/dev/null; then
      echo -e "  ${GREEN}✓ PipeWire service is active${NC}"
    elif [ "$pipewire_running" = true ]; then
      echo -e "  ${GREEN}✓ PipeWire is running${NC}"
    else
      echo -e "  ${RED}✗ PipeWire service is not active${NC}"
    fi
    
    # Check for pipewire-pulse
    if systemctl --user is-active --quiet pipewire-pulse.service 2>/dev/null; then
      echo -e "  ${GREEN}✓ PipeWire PulseAudio replacement service is active${NC}"
    else
      echo -e "  ${YELLOW}? PipeWire PulseAudio replacement service not detected${NC}"
    fi
    
    # Check for pw-cli tool
    if command -v pw-cli &> /dev/null && [ "$pipewire_running" = true ]; then
      echo -e "\n  ${PURPLE}PipeWire nodes:${NC}"
      pw-cli list-objects | grep node.name | sed 's/^/    /'
    fi
    
    # Check for pw-top
    if command -v pw-top &> /dev/null; then
      echo -e "\n  ${YELLOW}Tip: Run 'pw-top' to monitor PipeWire in real-time${NC}"
    fi
    
    echo ""
  fi
}

# Check for processes using audio devices
check_audio_processes() {
  echo -e "${CYAN}Checking processes using audio devices...${NC}"
  
  echo -e "  ${PURPLE}Processes using ALSA:${NC}"
  lsof +D /dev/snd 2>/dev/null | awk '{print $1,$2,$3,$NF}' | sort -u | sed 's/^/    /' || echo -e "    ${YELLOW}No processes found using ALSA devices directly${NC}"
  
  if [ "$pulse_running" = true ] || [ "$pipewire_running" = true ]; then
    echo -e "\n  ${PURPLE}Processes with audio connections:${NC}"
    ps aux | grep -E 'pulse|pipewire|jack|alsa' | grep -v grep | awk '{print $1,$2,$11,$12,$13}' | sed 's/^/    /'
  fi
  
  echo ""
}

# Check for common audio issues
check_common_issues() {
  echo -e "${CYAN}Checking for common audio issues...${NC}"
  
  # Check for muted audio
  if command -v amixer &> /dev/null; then
    if amixer sget Master | grep -q '\[off\]'; then
      echo -e "  ${RED}✗ Master volume is muted in ALSA${NC}"
    else
      echo -e "  ${GREEN}✓ Master volume is not muted in ALSA${NC}"
    fi
  fi
  
  # Check for user audio group
  if groups "$(whoami)" | grep -q audio; then
    echo -e "  ${GREEN}✓ User is in the 'audio' group${NC}"
  else
    echo -e "  ${YELLOW}? User is not in the 'audio' group${NC}"
  fi
  
  # Check for conflicting services
  if systemctl --user is-active --quiet pipewire.service 2>/dev/null && \
     systemctl --user is-active --quiet pulseaudio.service 2>/dev/null; then
    echo -e "  ${RED}✗ Both PipeWire and PulseAudio services are running simultaneously${NC}"
  fi
  
  # Check for module-suspend-on-idle in PulseAudio (can cause issues)
  if [ "$pulse_running" = true ] && command -v pactl &> /dev/null; then
    if pactl list modules | grep -q module-suspend-on-idle; then
      echo -e "  ${YELLOW}? PulseAudio module-suspend-on-idle is loaded (can cause issues with some applications)${NC}"
    fi
  fi
  
  echo ""
}

# System audio configuration
check_audio_config() {
  echo -e "${CYAN}Checking audio configuration files...${NC}"
  
  # Check ALSA config
  if [ -f "/etc/asound.conf" ]; then
    echo -e "  ${GREEN}✓ System-wide ALSA config found at /etc/asound.conf${NC}"
  fi
  
  if [ -f "$HOME/.asoundrc" ]; then
    echo -e "  ${GREEN}✓ User ALSA config found at $HOME/.asoundrc${NC}"
  fi
  
  # Check PulseAudio config
  if [ -d "/etc/pulse" ]; then
    echo -e "  ${GREEN}✓ PulseAudio system config directory found${NC}"
  fi
  
  if [ -d "$HOME/.config/pulse" ]; then
    echo -e "  ${GREEN}✓ PulseAudio user config directory found${NC}"
  fi
  
  # Check PipeWire config
  if [ -d "/etc/pipewire" ]; then
    echo -e "  ${GREEN}✓ PipeWire system config directory found${NC}"
  fi
  
  if [ -d "$HOME/.config/pipewire" ]; then
    echo -e "  ${GREEN}✓ PipeWire user config directory found${NC}"
  fi
  
  echo ""
}

# Testing audio output
test_audio() {
  echo -e "${CYAN}Audio test options:${NC}"
  echo -e "  ${YELLOW}To test audio output, you can run these commands:${NC}"
  
  if [ "$has_alsa" = true ] && command -v speaker-test &> /dev/null; then
    echo -e "    ${PURPLE}ALSA test:${NC} speaker-test -c2 -twav -l1"
  fi
  
  if [ "$has_pulse" = true ] && command -v paplay &> /dev/null; then
    echo -e "    ${PURPLE}PulseAudio test:${NC} pacat /dev/urandom | head -c 100000"
  fi
  
  if [ "$has_pipewire" = true ]; then
    if command -v pw-play &> /dev/null; then
      echo -e "    ${PURPLE}PipeWire test:${NC} pw-play /dev/urandom --verbose"
    elif command -v paplay &> /dev/null; then
      echo -e "    ${PURPLE}PipeWire test (via PulseAudio):${NC} pacat /dev/urandom | head -c 100000"
    fi
  fi
  
  echo ""
}

# Suggest fixes based on findings
suggest_fixes() {
  echo -e "${CYAN}Troubleshooting suggestions:${NC}"
  
  if [ "$has_pipewire" = true ] && [ "$pipewire_running" = false ]; then
    echo -e "  ${YELLOW}→ Start PipeWire:${NC} systemctl --user start pipewire.service pipewire-pulse.service"
  fi
  
  if [ "$has_pulse" = true ] && [ "$pulse_running" = false ] && [ "$pipewire_running" = false ]; then
    echo -e "  ${YELLOW}→ Start PulseAudio:${NC} pulseaudio --start"
  fi
  
  echo -e "  ${YELLOW}→ If audio is not working:${NC}"
  echo -e "    - Check volume levels and mute status with alsamixer or pavucontrol"
  echo -e "    - Verify correct output device is selected"
  echo -e "    - Try restarting the audio service:"
  
  if [ "$has_pipewire" = true ]; then
    echo -e "      systemctl --user restart pipewire.service pipewire-pulse.service"
  elif [ "$has_pulse" = true ]; then
    echo -e "      pulseaudio -k && pulseaudio --start"
  fi
  
  if ! groups "$(whoami)" | grep -q audio; then
    echo -e "    - Consider adding your user to the audio group:"
    echo -e "      sudo usermod -a -G audio $(whoami) && newgrp audio"
  fi
  
  echo ""
}

# Show audio control applications
show_audio_tools() {
  echo -e "${CYAN}Available audio control applications:${NC}"
  
  for app in alsamixer amixer pavucontrol pulsemixer qpwgraph pw-top helvum jamesdsp easyeffects; do
    if command -v "$app" &> /dev/null; then
      echo -e "  ${GREEN}✓ $app${NC}"
    fi
  done
  
  echo ""
}

# Show system audio information
print_summary() {
  echo -e "${BOLD}${BLUE}===== Summary =====${NC}\n"
  
  echo -e "${PURPLE}Primary audio system:${NC}"
  if [ "$pipewire_running" = true ]; then
    echo -e "  ${GREEN}PipeWire${NC} (modern audio server with compatibility layers)"
    if pgrep -f "pipewire-pulse" &> /dev/null; then
      echo -e "  PipeWire is providing PulseAudio compatibility"
    fi
  elif [ "$pulse_running" = true ]; then
    echo -e "  ${GREEN}PulseAudio${NC} (common audio server)"
  elif [ "$has_alsa" = true ]; then
    echo -e "  ${GREEN}ALSA${NC} (low-level audio system)"
  else
    echo -e "  ${RED}No audio system detected${NC}"
  fi
  
  echo -e "\n${PURPLE}Audio configuration:${NC}"
  if [ "$pipewire_running" = true ]; then
    echo -e "  Config: ~/.config/pipewire/ or /etc/pipewire/"
  elif [ "$pulse_running" = true ]; then
    echo -e "  Config: ~/.config/pulse/ or /etc/pulse/"
  elif [ "$has_alsa" = true ]; then
    echo -e "  Config: ~/.asoundrc or /etc/asound.conf"
  fi
}

# Main function
main() {
  check_root
  check_dependencies
  detect_audio_systems
  check_alsa_devices
  check_pulseaudio
  check_pipewire
  check_audio_processes
  check_common_issues
  check_audio_config
  test_audio
  show_audio_tools
  suggest_fixes
  print_summary
  
  echo -e "\n${BOLD}${BLUE}=======================${NC}"
  echo -e "${GREEN}Audio debug scan complete!${NC}"
}

main