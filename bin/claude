#!/usr/bin/env python3

"""
Claude Code wrapper with ops MCP configurations
Usage:
  ./claude [--admin] [--cluster NAME] [claude args...]  # Ops mode with k8s/Grafana

Operations Mode Flags:
  --admin          Use admin role (write access to k8s, default: read-only)
  --cluster NAME   Override cluster filter for Grafana queries (default: auto-detected)
"""

import sys
import subprocess
import os
import json
import shutil
from pathlib import Path


def load_env_file(env_path):
    """Load environment variables from .env file"""
    env_vars = {}
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                # Skip comments and empty lines
                if not line or line.startswith('#'):
                    continue
                # Parse KEY=VALUE
                if '=' in line:
                    key, value = line.split('=', 1)
                    # Remove quotes if present
                    value = value.strip().strip('"').strip("'")
                    env_vars[key.strip()] = value
    return env_vars


def command_exists(command):
    """Check if a command exists in PATH"""
    return shutil.which(command) is not None


def print_warning(message):
    """Print warning message in yellow"""
    print(f"\033[1;33mWarning: {message}\033[0m", file=sys.stderr)


def print_info(message):
    """Print info message in cyan"""
    print(f"\033[1;36m{message}\033[0m")


def print_success(message):
    """Print success message in green"""
    print(f"\033[1;32m{message}\033[0m")


def check_ops_dependencies(env_vars):
    """Check for required environment variables and commands, return list of warnings"""
    warnings = []

    # Check for required environment variables
    grafana_token = env_vars.get('GRAFANA_SERVICE_ACCOUNT_TOKEN', os.environ.get('GRAFANA_SERVICE_ACCOUNT_TOKEN', ''))
    if not grafana_token:
        warnings.append("GRAFANA_SERVICE_ACCOUNT_TOKEN is not set. Grafana MCP server may not work.")

    # Check for required commands
    if not command_exists('npx'):
        warnings.append("'npx' command not found. Kubernetes MCP server will not work.")
        warnings.append("  Install with: npm install -g npm (or install Node.js)")

    if not command_exists('docker'):
        warnings.append("'docker' command not found. Grafana MCP server will not work.")
        warnings.append("  Install from: https://docs.docker.com/get-docker/")

    return warnings


def get_current_k8s_context():
    """Get the current kubernetes context name"""
    try:
        result = subprocess.run(
            ["kubectl", "config", "current-context"],
            check=True,
            capture_output=True,
            text=True
        )
        return result.stdout.strip()
    except (subprocess.CalledProcessError, FileNotFoundError):
        return None


def build_ops_config(env_vars, use_admin):
    """Build ops MCP configuration with k8s/grafana"""
    # Get grafana token
    grafana_token = env_vars.get('GRAFANA_SERVICE_ACCOUNT_TOKEN', os.environ.get('GRAFANA_SERVICE_ACCOUNT_TOKEN', ''))

    # Build kubernetes args based on admin flag
    k8s_args = [
        "-y",
        "kubernetes-mcp-server@v0.0.50"
    ]
    if not use_admin:
        k8s_args.append("--read-only")

    # Set kubeconfig path
    kubeconfig_path = str(Path.home() / ".kube" / "config.ocean.yml")

    # Build MCP server configuration
    return {
        "mcpServers": {
            "kubernetes": {
                "type": "stdio",
                "command": "npx",
                "args": k8s_args,
                "env": {
                    "KUBECONFIG": kubeconfig_path
                }
            },
            "grafana": {
                "command": "docker",
                "args": [
                    "run",
                    "--rm",
                    "-i",
                    "-e",
                    "GRAFANA_URL",
                    "-e",
                    "GRAFANA_SERVICE_ACCOUNT_TOKEN",
                    "mcp/grafana",
                    "--disable-incident",
                    "--disable-oncall",
                    "--disable-asserts",
                    "--disable-sift",
                    "--disable-admin",
                    "--disable-pyroscope",
                    "-t",
                    "stdio"
                ],
                "env": {
                    "GRAFANA_URL": env_vars.get('GRAFANA_URL', os.environ.get('GRAFANA_URL', 'https://grafana.example.com')),
                    "GRAFANA_SERVICE_ACCOUNT_TOKEN": grafana_token
                }
            }
        }
    }


def build_system_prompt():
    """Build system prompt for MCP configuration"""
    prompt = """When working with Kubernetes:

1. PREFER using the kubernetes MCP server tools instead of kubectl commands whenever possible
2. Only use kubectl via Bash when the MCP server doesn't provide the needed functionality
3. The kubernetes MCP server provides tools for listing resources, getting details, viewing logs, and events"""

    return prompt


def main():
    # Get project root directory (parent of bin/)
    script_path = Path(__file__).resolve()
    project_root = script_path.parent.parent
    script_dir = script_path.parent

    # Load .env file if it exists
    env_file = project_root / ".env"
    env_vars = load_env_file(env_file)

    # Parse flags
    use_admin = False
    cluster_override = None
    claude_args = []

    i = 1
    while i < len(sys.argv):
        arg = sys.argv[i]
        if arg == "--admin":
            use_admin = True
        elif arg == "--cluster":
            # Get the next argument as the cluster name
            if i + 1 < len(sys.argv):
                cluster_override = sys.argv[i + 1]
                i += 1  # Skip the next argument
            else:
                print("Error: --cluster requires a cluster name", file=sys.stderr)
                sys.exit(1)
        elif arg == "--help" or arg == "-h":
            print(__doc__)
            sys.exit(0)
        else:
            claude_args.append(arg)
        i += 1

    # Get current k8s context for display
    current_context = cluster_override if cluster_override else (get_current_k8s_context() or "Not detected")

    # Print configuration summary
    print()
    print_info("=" * 60)
    print_info("Claude Code - Operations Environment")
    print_info("=" * 60)
    print()
    print_info(f"  Mode:            Operations")
    print_info(f"  Access Mode:     {'Write (Admin)' if use_admin else 'Read-Only'}")
    print_info(f"  Kubeconfig:      ~/.kube/config.ocean.yml")
    print_info(f"  K8s Context:     {current_context}")
    print()
    print_info("  MCP Servers:")
    print_info(f"    • kubernetes   {'[Write Access]' if use_admin else '[Read-Only]'}")
    print_info(f"    • grafana      [Enabled]")
    print()
    print_info("=" * 60)
    print()

    mcp_config = build_ops_config(env_vars, use_admin)

    # Convert MCP config to JSON string
    mcp_config_json = json.dumps(mcp_config)

    # Build system prompt
    system_prompt = build_system_prompt(cluster_override)

    # Print system prompt
    print_info("  Appended System Prompt:")
    for line in system_prompt.split('\n'):
        print_info(f"    {line}")
    print()
    print_info("=" * 60)
    print()

    # Check dependencies and collect warnings
    warnings = check_ops_dependencies(env_vars)

    # Run claude with MCP server configuration
    print_success("✓ Configuration complete. Launching Claude Code...")
    print()

    # Print warnings at the end
    if warnings:
        for warning in warnings:
            print_warning(warning)
        print()

    cmd = ["claude", "--mcp-config", mcp_config_json, "--append-system-prompt", system_prompt] + claude_args

    # Run the command
    try:
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as e:
        sys.exit(e.returncode)
    except FileNotFoundError:
        print("Error: 'claude' command not found. Please install Claude Code CLI.", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
