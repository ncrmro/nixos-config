#!/usr/bin/env bash
# investigate-system-memory-errors - System memory error investigation script
# Investigates memory/hardware errors in current boot or after unexpected reboots

set -euo pipefail

SCRIPT_NAME="investigate-system-memory-errors"
MODE="reboot"  # Default mode
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

show_help() {
    echo "Usage: $SCRIPT_NAME [OPTIONS]"
    echo
    echo "Investigate system memory and hardware errors"
    echo
    echo "OPTIONS:"
    echo "  -r, --reboot    Investigate last unexpected reboot (default)"
    echo "  -c, --current   Check current boot for errors"
    echo "  -h, --help      Show this help message"
    echo
    echo "Examples:"
    echo "  $SCRIPT_NAME              # Check last reboot"
    echo "  $SCRIPT_NAME --current    # Check current boot"
    echo
}

parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -r|--reboot)
                MODE="reboot"
                shift
                ;;
            -c|--current)
                MODE="current"
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
}

print_header() {
    echo -e "${BLUE}===============================================${NC}"
    if [[ "$MODE" == "reboot" ]]; then
        echo -e "${BLUE}  Last Reboot Investigation Report${NC}"
    else
        echo -e "${BLUE}  Current Boot Error Check Report${NC}"
    fi
    echo -e "${BLUE}===============================================${NC}"
    echo
}

print_section() {
    echo -e "${GREEN}## $1${NC}"
    echo
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

check_boot_history() {
    print_section "Boot History"
    
    echo "Current uptime:"
    uptime
    echo
    
    echo "System boot time:"
    who -b
    echo
    
    if [[ "$MODE" == "reboot" ]]; then
        echo "Recent boot history:"
        last reboot | head -10
        echo
    fi
}

check_hardware_errors() {
    print_section "Hardware Error Analysis"
    
    # Check for hardware errors in current boot
    if sudo -n true 2>/dev/null; then
        echo "Checking kernel messages for hardware errors:"
        if sudo dmesg | grep -i "hardware error" | tail -10; then
            print_warning "Hardware errors detected in current kernel log"
        else
            print_info "No hardware errors found in current kernel log"
        fi
        echo
    else
        print_warning "Cannot check dmesg - requires sudo privileges"
    fi
    
    # Check appropriate boot based on mode
    if [[ "$MODE" == "reboot" ]]; then
        echo "Checking previous boot logs for hardware errors:"
        if journalctl --boot=-1 --priority=0..2 --no-pager | grep -i "hardware error" | tail -10; then
            print_error "Critical hardware errors found in previous boot!"
        else
            print_info "No critical hardware errors in previous boot logs"
        fi
    else
        echo "Checking current boot logs for hardware errors:"
        if journalctl --boot=0 --priority=0..2 --no-pager | grep -i "hardware error" | tail -10; then
            print_error "Critical hardware errors found in current boot!"
        else
            print_info "No critical hardware errors in current boot logs"
        fi
    fi
    echo
}

check_memory_errors() {
    print_section "Memory Error Analysis"
    
    if [[ "$MODE" == "reboot" ]]; then
        echo "Checking for ECC/memory errors around last reboot:"
        if journalctl --since "$(date -d '4 hours ago' '+%Y-%m-%d %H:%M')" --no-pager | grep -i -E "(MC[0-9]+_STATUS|memory.*error|ecc.*error)" | tail -10; then
            print_error "Memory controller errors detected around reboot time!"
            echo
            print_info "Common causes:"
            echo "  - CPU memory controller voltage (SOC voltage) too low"
            echo "  - RAM voltage incorrect (check VDIMM)"
            echo "  - Failing CPU cache or memory controller"
            echo "  - RAM modules failing"
        else
            print_info "No memory errors detected around reboot time"
        fi
    else
        echo "Checking current boot for ECC/memory errors:"
        if journalctl --boot=0 --no-pager | grep -i -E "(MC[0-9]+_STATUS|memory.*error|ecc.*error)" | tail -10; then
            print_error "Memory controller errors detected in current boot!"
            echo
            print_info "Common causes:"
            echo "  - CPU memory controller voltage (SOC voltage) too low"
            echo "  - RAM voltage incorrect (check VDIMM)"
            echo "  - Failing CPU cache or memory controller"
            echo "  - RAM modules failing"
        else
            print_info "No memory errors detected in current boot"
        fi
    fi
    echo
}

check_thermal_issues() {
    print_section "Thermal Analysis"
    
    if command -v sensors >/dev/null 2>&1; then
        echo "Current system temperatures:"
        sensors 2>/dev/null | head -20 || print_warning "sensors command failed"
        echo
    else
        print_warning "sensors command not available - install lm-sensors"
    fi
    
    if [[ "$MODE" == "reboot" ]]; then
        echo "Checking for thermal events around reboot:"
        if journalctl --since "$(date -d '4 hours ago' '+%Y-%m-%d %H:%M')" --no-pager | grep -i -E "(thermal|temperature|overheat|throttle)" | tail -5; then
            print_warning "Thermal events detected around reboot time"
        else
            print_info "No thermal events around reboot time"
        fi
    else
        echo "Checking current boot for thermal events:"
        if journalctl --boot=0 --no-pager | grep -i -E "(thermal|temperature|overheat|throttle)" | tail -5; then
            print_warning "Thermal events detected in current boot"
        else
            print_info "No thermal events in current boot"
        fi
    fi
    echo
}

check_power_events() {
    if [[ "$MODE" != "reboot" ]]; then
        return  # Skip power events check for current boot mode
    fi
    
    print_section "Power Management Analysis"
    
    echo "Checking shutdown logs from previous boot:"
    if journalctl --boot=-1 --reverse --no-pager | grep -i -E "(shutdown|reboot|power)" | head -10; then
        print_info "Previous shutdown events found"
    else
        print_warning "No explicit shutdown events found - may indicate unexpected restart"
    fi
    echo
    
    echo "Checking for power management issues:"
    journalctl --since "$(date -d '4 hours ago' '+%Y-%m-%d %H:%M')" --no-pager | grep -i -E "(power.*fail|ups|battery)" | tail -5 || print_info "No power management issues detected"
    echo
}

check_critical_services() {
    if [[ "$MODE" != "reboot" ]]; then
        return  # Skip service analysis for current boot mode
    fi
    
    print_section "Critical Service Analysis"
    
    echo "Services that received SIGTERM before restart:"
    if journalctl --boot=-1 --reverse --no-pager | grep -i "sigterm" | head -10; then
        print_info "Services were terminated (normal shutdown process)"
    else
        print_warning "No SIGTERM signals found - may indicate hard restart"
    fi
    echo
}

generate_recommendations() {
    print_section "Recommendations"
    
    if [[ "$MODE" == "reboot" ]]; then
        echo "Based on the reboot analysis, consider these steps:"
    else
        echo "Based on the current boot analysis, consider these steps:"
    fi
    echo
    echo "1. BIOS/UEFI Voltage Check:"
    echo "   - Reset BIOS to defaults first"
    echo "   - Check SOC voltage (AMD) / VCCSA (Intel)"
    echo "   - Verify RAM voltage matches spec (usually 1.35V DDR4)"
    echo "   - Check CPU core voltage if undervolted"
    echo
    echo "2. Hardware Diagnostics:"
    echo "   - Run memtest86+ overnight"
    echo "   - CPU stress test: stress-ng --cpu 8 --timeout 300s"
    echo "   - Monitor temperatures under load"
    echo
    echo "3. System Monitoring:"
    echo "   - Check dmesg regularly: sudo dmesg | grep -i error"
    echo "   - Monitor with: journalctl -f | grep -i error"
    echo "   - Set up hardware monitoring (lm-sensors)"
    echo
    if [[ "$MODE" == "current" ]]; then
        echo "4. Current Boot Monitoring:"
        echo "   - Run: $SCRIPT_NAME --current periodically"
        echo "   - Watch for accumulating errors"
        echo "   - Consider preventive restart if errors increase"
        echo
    fi
}

main() {
    parse_args "$@"
    print_header
    
    if [[ "$MODE" == "reboot" ]]; then
        print_info "Investigating last unexpected reboot at $(date)"
    else
        print_info "Checking current boot for memory/hardware errors at $(date)"
    fi
    print_info "Running as: $(whoami)"
    echo
    
    check_boot_history
    check_hardware_errors
    check_memory_errors  
    check_thermal_issues
    check_power_events
    check_critical_services
    generate_recommendations
    
    print_section "Investigation Complete"
    if [[ "$MODE" == "reboot" ]]; then
        print_info "Review the output above for potential causes of restart"
    else
        print_info "Review the output above for current system health"
    fi
    print_info "Focus on hardware/memory errors and voltage issues if found"
}

# Run main function
main "$@"