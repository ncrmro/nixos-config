# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  utils,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = ["xhci_pci" "ehci_pci" "ahci" "usbhid" "usb_storage" "sd_mod"];
  boot.initrd.kernelModules = [];
  boot.kernelModules = ["kvm-intel" "wl"];
  #boot.extraModulePackages = [ config.boot.kernelPackages.broadcom_sta ];
  networking.hostId = "7a8e1638";

  boot.initrd = {
    # This would be a nightmare without systemd initrd
    systemd.enable = true;
    systemd.emergencyAccess = true;

    # Disable NixOS's systemd service that imports the pool
    systemd.services.zfs-import-rpool.enable = false;

    systemd.services.import-rpool-bare = let
      # Compute the systemd units for the devices in the pool
      devices = map (p: utils.escapeSystemdPath p + ".device") [
        "/dev/disk/by-id/ata-M4-CT128M4SSD2_000000001224090D40C2"
      ];
    in {
      after = ["modprobe@zfs.service"] ++ devices;
      requires = ["modprobe@zfs.service"];

      # Devices are added to 'wants' instead of 'requires' so that a
      # degraded import may be attempted if one of them times out.
      # 'cryptsetup-pre.target' is wanted because it isn't pulled in
      # normally and we want this service to finish before
      # 'systemd-cryptsetup@.service' instances begin running.
      wants = ["cryptsetup-pre.target"] ++ devices;
      before = ["cryptsetup-pre.target"];

      unitConfig.DefaultDependencies = false;
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
      };
      path = [config.boot.zfs.package];
      enableStrictShellChecks = true;
      script = ''
        zpool import -N -d /dev/disk/by-id rpool
      '';
    };

    luks.devices.credstore = {
      device = "/dev/zvol/rpool/credstore";
      # 'tpm2-device=auto' usually isn't necessary, but for reasons
      # that bewilder me, adding 'tpm2-measure-pcr=yes' makes it
      # required. And 'tpm2-measure-pcr=yes' is necessary to make sure
      # the TPM2 enters a state where the LUKS volume can no longer be
      # decrypted. That way if we accidentally boot an untrustworthy
      # OS somehow, they can't decrypt the LUKS volume.
      # crypttabExtraOpts = [ "tpm2-measure-pcr=yes" "tpm2-device=auto" ];
    };
    # Adding an fstab is the easiest way to add file systems whose
    # purpose is solely in the initrd and aren't a part of '/sysroot'.
    # The 'x-systemd.after=' might seem unnecessary, since the mount
    # unit will already be ordered after the mapped device, but it
    # helps when stopping the mount unit and cryptsetup service to
    # make sure the LUKS device can close, thanks to how systemd
    # orders the way units are stopped.
    supportedFilesystems.ext4 = true;
    systemd.contents."/etc/fstab".text = ''
      /dev/mapper/credstore /etc/credstore ext4 defaults,x-systemd.after=systemd-cryptsetup@credstore.service 0 2
    '';
    # Add some conflicts to ensure the credstore closes before leaving initrd.
    systemd.targets.initrd-switch-root = {
      conflicts = ["etc-credstore.mount" "systemd-cryptsetup@credstore.service"];
      after = ["etc-credstore.mount" "systemd-cryptsetup@credstore.service"];
    };

    # After the pool is imported and the credstore is mounted, finally
    # load the key. This uses systemd credentials, which is why the
    # credstore is mounted at '/etc/credstore'. systemd will look
    # there for a credential file called 'zfs-sysroot.mount' and
    # provide it in the 'CREDENTIALS_DIRECTORY' that is private to
    # this service. If we really wanted, we could make the credstore a
    # 'WantsMountsFor' instead and allow providing the key through any
    # of the numerous other systemd credential provision mechanisms.
    systemd.services.rpool-load-key = {
      requiredBy = ["initrd.target"];
      before = ["sysroot.mount" "initrd.target"];
      requires = ["import-rpool-bare.service"];
      after = ["import-rpool-bare.service"];
      unitConfig.RequiresMountsFor = "/etc/credstore";
      unitConfig.DefaultDependencies = false;
      serviceConfig = {
        Type = "oneshot";
        ImportCredential = "zfs-sysroot.mount";
        RemainAfterExit = true;
        ExecStart = "${config.boot.zfs.package}/bin/zfs load-key -L file://\"\${CREDENTIALS_DIRECTORY}\"/zfs-sysroot.mount rpool";
      };
    };
  };

  fileSystems."/" = {
    device = "rpool/root";
    fsType = "zfs";
  };

  fileSystems."/home" = {
    device = "rpool/home";
    fsType = "zfs";
  };
  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/E6E0-2CE8";
    fsType = "vfat";
    options = ["fmask=0077" "dmask=0077"];
  };
  swapDevices = [];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp2s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp3s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
